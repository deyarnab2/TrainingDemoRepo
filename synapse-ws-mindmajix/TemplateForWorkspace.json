{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-ws-mindmajix"
		},
		"AzureDataLakeStorageTraining_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorageTraining'"
		},
		"DatalakeStorageCopyData_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'DatalakeStorageCopyData'"
		},
		"synapse-ws-mindmajix-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-ws-mindmajix-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-ws-mindmajix.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureDataLakeStorageTraining_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsesadlsgen2.dfs.core.windows.net/"
		},
		"DatalakeStorageCopyData_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsesadlsgen2.dfs.core.windows.net/"
		},
		"synapse-ws-mindmajix-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsesadlsgen2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Append Variable')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ListofFiles",
							"value": {
								"value": "@pipeline().parameters.FileName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Output",
							"value": {
								"value": "@variables('ListofFiles')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "DailySales"
					}
				},
				"variables": {
					"ListofFiles": {
						"type": "Array",
						"defaultValue": [
							"IndiaSales",
							"UkSales",
							"USSales"
						]
					},
					"Output": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T02:40:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"allowPolyBase": true,
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DateID",
											"type": "Int32"
										},
										"sink": {
											"name": "DateID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MedallionID",
											"type": "Int32"
										},
										"sink": {
											"name": "MedallionID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "HackneyLicenseID",
											"type": "Int32"
										},
										"sink": {
											"name": "HackneyLicenseID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "PickupTimeID",
											"type": "Int32"
										},
										"sink": {
											"name": "PickupTimeID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DropoffTimeID",
											"type": "Int32"
										},
										"sink": {
											"name": "DropoffTimeID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "PickupGeographyID",
											"type": "Int32"
										},
										"sink": {
											"name": "PickupGeographyID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DropoffGeographyID",
											"type": "Int32"
										},
										"sink": {
											"name": "DropoffGeographyID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "PickupLatitude",
											"type": "Double"
										},
										"sink": {
											"name": "PickupLatitude",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "PickupLongitude",
											"type": "Double"
										},
										"sink": {
											"name": "PickupLongitude",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "PickupLatLong",
											"type": "String"
										},
										"sink": {
											"name": "PickupLatLong",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DropoffLatitude",
											"type": "Double"
										},
										"sink": {
											"name": "DropoffLatitude",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "DropoffLongitude",
											"type": "Double"
										},
										"sink": {
											"name": "DropoffLongitude",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "DropoffLatLong",
											"type": "String"
										},
										"sink": {
											"name": "DropoffLatLong",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PassengerCount",
											"type": "Int32"
										},
										"sink": {
											"name": "PassengerCount",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TripDurationSeconds",
											"type": "Int32"
										},
										"sink": {
											"name": "TripDurationSeconds",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TripDistanceMiles",
											"type": "Double"
										},
										"sink": {
											"name": "TripDistanceMiles",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "PaymentType",
											"type": "String"
										},
										"sink": {
											"name": "PaymentType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "FareAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "FareAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "SurchargeAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "SurchargeAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TaxAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TaxAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TipAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TipAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TollsAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TollsAmount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "TotalAmount",
											"type": "Decimal"
										},
										"sink": {
											"name": "TotalAmount",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "NYCTaxiTripDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQLPoolSynapseTrainingDatabase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T02:39:05Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/NYCTaxiTripDataset')]",
				"[concat(variables('workspaceId'), '/datasets/SQLPoolSynapseTrainingDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Copy using Stored Procs')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "SQL pool stored procedure1",
						"type": "SqlPoolStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"sqlPool": {
							"referenceName": "SynapseTrainingDB",
							"type": "SqlPoolReference"
						},
						"typeProperties": {
							"storedProcedureName": "[dbo].[CopyData]"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T04:12:29Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/SynapseTrainingDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delete')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Operation",
								"value": "Deleting text files from Data lake Storage"
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "TextFilesDeletion",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "DatalakeStorageCopyData",
									"type": "LinkedServiceReference"
								},
								"path": "synapsedemo"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.txt",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T02:39:33Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TextFilesDeletion')]",
				"[concat(variables('workspaceId'), '/linkedServices/DatalakeStorageCopyData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/For Each')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.Output",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Foreachactivity",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Output": {
						"type": "array",
						"defaultValue": [
							"Output1",
							"Output2",
							"Output3"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T02:41:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Binary1')]",
				"[concat(variables('workspaceId'), '/datasets/Foreachactivity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Get Metadata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "GetMetadataForParquetFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T02:41:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GetMetadataForParquetFile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/If Else')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.CopytoOutput1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Foreachactivity",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@pipeline().parameters.Output2",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Foreachactivity",
											"type": "DatasetReference",
											"parameters": {
												"FolderName": {
													"value": "@pipeline().parameters.Output1",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CopytoOutput1": {
						"type": "string",
						"defaultValue": "False"
					},
					"Output1": {
						"type": "string",
						"defaultValue": "Output 1"
					},
					"Output2": {
						"type": "string",
						"defaultValue": "Output  2"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T02:55:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Binary1')]",
				"[concat(variables('workspaceId'), '/datasets/Foreachactivity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Notebook 3",
								"type": "NotebookReference"
							},
							"parameters": {
								"first_name": {
									"value": "Sohail",
									"type": "string"
								},
								"Last_name": {
									"value": "Kumar",
									"type": "string"
								}
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T02:38:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Notebook 3')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.foldername",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "output1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "Binary1",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "Foreachactivity",
													"type": "DatasetReference",
													"parameters": {
														"FolderName": {
															"value": "@pipeline().parameters.foldername",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "output2",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "Binary1",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "Foreachactivity",
													"type": "DatasetReference",
													"parameters": {
														"FolderName": {
															"value": "@pipeline().parameters.foldername",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"foldername": {
						"type": "string",
						"defaultValue": "output2"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-13T02:54:34Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Binary1')]",
				"[concat(variables('workspaceId'), '/datasets/Foreachactivity')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-13T03:38:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 3')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "scdexecution",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "ParquetReadSettings"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"sqlReaderStoredProcedureName": "[dbo].[usp_LastLoadDate]",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SQLPoolSynapseTrainingDatabase",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(\nactivity('Get Metadata1').output.lastModified,\nactivity('Lookup1').output.firstRow.ExecutionStartDate\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "SqlPoolSink",
											"allowCopyCommand": true,
											"copyCommandSettings": {},
											"tableOption": "autoCreate"
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "scdexecution",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SQLPoolSynapseTrainingDatabase",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-13T04:18:21Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/scdexecution')]",
				"[concat(variables('workspaceId'), '/datasets/SQLPoolSynapseTrainingDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Send Email')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-06.eastus.logic.azure.com:443/workflows/f8b9caa89d97479cace332ff1b4bf4d1/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=DjlqhSjhdwgBIkL8NMauiROkdulKAkqyItWFbabLbn0",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{ \n\"dataFactoryName\": \"@{pipeline().DataFactory}\",\n\"message\": \"@{activity('Copy data1').error.message}\",\n\"pipelineName\": \"@{pipeline().Pipeline}\",\n\"pipelineRunId\": \"@{pipeline().RunId}\",\n\"time\": \"@{utcnow()}\",\n\"title\": \"Data Warehouse Pipeline Execution Failed\",\n\"color\": \"Red\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "SqlPoolSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "GetMetadataForParquetFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQLPoolSynapseTrainingDatabase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "@activity('Copy data1').error.message",
								"type": "Expression"
							},
							"errorCode": "2202"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-12T04:47:33Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/datasets/GetMetadataForParquetFile')]",
				"[concat(variables('workspaceId'), '/datasets/SQLPoolSynapseTrainingDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Set Variable')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "FileTypes",
							"value": {
								"value": "@replace(pipeline().parameters.FileName,'Sales','')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "DailySales"
					}
				},
				"variables": {
					"FileTypes": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T02:40:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Until')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('FileExists'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Binary1",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output.exists)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 60
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "FileExists",
													"value": "True"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"FileExists": {
						"type": "String",
						"defaultValue": "False"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-09T03:15:06Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Binary1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Binary1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DatalakeStorageCopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SpDynamicSpace10.txt",
						"folderPath": "Input",
						"fileSystem": "synapsetraining"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DatalakeStorageCopyData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Foreachactivity')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DatalakeStorageCopyData",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": "synapsetraining"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DatalakeStorageCopyData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GetMetadataForParquetFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DatalakeStorageCopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "NYCTripSmall.parquet",
						"folderPath": "TextFiles",
						"fileSystem": "synapsetraining"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "DateID",
						"type": "INT32"
					},
					{
						"name": "MedallionID",
						"type": "INT32"
					},
					{
						"name": "HackneyLicenseID",
						"type": "INT32"
					},
					{
						"name": "PickupTimeID",
						"type": "INT32"
					},
					{
						"name": "DropoffTimeID",
						"type": "INT32"
					},
					{
						"name": "PickupGeographyID",
						"type": "INT32"
					},
					{
						"name": "DropoffGeographyID",
						"type": "INT32"
					},
					{
						"name": "PickupLatitude",
						"type": "DOUBLE"
					},
					{
						"name": "PickupLongitude",
						"type": "DOUBLE"
					},
					{
						"name": "PickupLatLong",
						"type": "UTF8"
					},
					{
						"name": "DropoffLatitude",
						"type": "DOUBLE"
					},
					{
						"name": "DropoffLongitude",
						"type": "DOUBLE"
					},
					{
						"name": "DropoffLatLong",
						"type": "UTF8"
					},
					{
						"name": "PassengerCount",
						"type": "INT32"
					},
					{
						"name": "TripDurationSeconds",
						"type": "INT32"
					},
					{
						"name": "TripDistanceMiles",
						"type": "DOUBLE"
					},
					{
						"name": "PaymentType",
						"type": "UTF8"
					},
					{
						"name": "FareAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SurchargeAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TipAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TollsAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DatalakeStorageCopyData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCTaxiTripDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DatalakeStorageCopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "NYCTripSmall.parquet",
						"fileSystem": "synapsetraining"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "DateID",
						"type": "INT32"
					},
					{
						"name": "MedallionID",
						"type": "INT32"
					},
					{
						"name": "HackneyLicenseID",
						"type": "INT32"
					},
					{
						"name": "PickupTimeID",
						"type": "INT32"
					},
					{
						"name": "DropoffTimeID",
						"type": "INT32"
					},
					{
						"name": "PickupGeographyID",
						"type": "INT32"
					},
					{
						"name": "DropoffGeographyID",
						"type": "INT32"
					},
					{
						"name": "PickupLatitude",
						"type": "DOUBLE"
					},
					{
						"name": "PickupLongitude",
						"type": "DOUBLE"
					},
					{
						"name": "PickupLatLong",
						"type": "UTF8"
					},
					{
						"name": "DropoffLatitude",
						"type": "DOUBLE"
					},
					{
						"name": "DropoffLongitude",
						"type": "DOUBLE"
					},
					{
						"name": "DropoffLatLong",
						"type": "UTF8"
					},
					{
						"name": "PassengerCount",
						"type": "INT32"
					},
					{
						"name": "TripDurationSeconds",
						"type": "INT32"
					},
					{
						"name": "TripDistanceMiles",
						"type": "DOUBLE"
					},
					{
						"name": "PaymentType",
						"type": "UTF8"
					},
					{
						"name": "FareAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SurchargeAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TipAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TollsAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DatalakeStorageCopyData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NycTripTaxi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageTraining",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "NYCTripSmall.parquet",
						"folderPath": "output1",
						"fileSystem": "synapsetraining"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "DateID",
						"type": "INT32"
					},
					{
						"name": "MedallionID",
						"type": "INT32"
					},
					{
						"name": "HackneyLicenseID",
						"type": "INT32"
					},
					{
						"name": "PickupTimeID",
						"type": "INT32"
					},
					{
						"name": "DropoffTimeID",
						"type": "INT32"
					},
					{
						"name": "PickupGeographyID",
						"type": "INT32"
					},
					{
						"name": "DropoffGeographyID",
						"type": "INT32"
					},
					{
						"name": "PickupLatitude",
						"type": "DOUBLE"
					},
					{
						"name": "PickupLongitude",
						"type": "DOUBLE"
					},
					{
						"name": "PickupLatLong",
						"type": "UTF8"
					},
					{
						"name": "DropoffLatitude",
						"type": "DOUBLE"
					},
					{
						"name": "DropoffLongitude",
						"type": "DOUBLE"
					},
					{
						"name": "DropoffLatLong",
						"type": "UTF8"
					},
					{
						"name": "PassengerCount",
						"type": "INT32"
					},
					{
						"name": "TripDurationSeconds",
						"type": "INT32"
					},
					{
						"name": "TripDistanceMiles",
						"type": "DOUBLE"
					},
					{
						"name": "PaymentType",
						"type": "UTF8"
					},
					{
						"name": "FareAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SurchargeAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TipAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TollsAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageTraining')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLPoolSynapseTrainingDatabase')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "DateID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MedallionID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HackneyLicenseID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickupTimeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DropoffTimeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickupGeographyID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DropoffGeographyID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickupLatitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "PickupLongitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "PickupLatLong",
						"type": "nvarchar"
					},
					{
						"name": "DropoffLatitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DropoffLongitude",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DropoffLatLong",
						"type": "nvarchar"
					},
					{
						"name": "PassengerCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TripDurationSeconds",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TripDistanceMiles",
						"type": "float",
						"precision": 15
					},
					{
						"name": "PaymentType",
						"type": "nvarchar"
					},
					{
						"name": "FareAmount",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SurchargeAmount",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmount",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TipAmount",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TollsAmount",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalAmount",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "NYCTaxiTripSmallDummy"
				},
				"sqlPool": {
					"referenceName": "SynapseTrainingDB",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/SynapseTrainingDB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TextFilesDeletion')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DatalakeStorageCopyData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "TextFiles",
						"fileSystem": "synapsetraining"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DatalakeStorageCopyData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/scdexecution')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageTraining",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "NYCTripSmall.parquet",
						"folderPath": "scd",
						"fileSystem": "synapsetraining"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "DateID",
						"type": "INT32"
					},
					{
						"name": "MedallionID",
						"type": "INT32"
					},
					{
						"name": "HackneyLicenseID",
						"type": "INT32"
					},
					{
						"name": "PickupTimeID",
						"type": "INT32"
					},
					{
						"name": "DropoffTimeID",
						"type": "INT32"
					},
					{
						"name": "PickupGeographyID",
						"type": "INT32"
					},
					{
						"name": "DropoffGeographyID",
						"type": "INT32"
					},
					{
						"name": "PickupLatitude",
						"type": "DOUBLE"
					},
					{
						"name": "PickupLongitude",
						"type": "DOUBLE"
					},
					{
						"name": "PickupLatLong",
						"type": "UTF8"
					},
					{
						"name": "DropoffLatitude",
						"type": "DOUBLE"
					},
					{
						"name": "DropoffLongitude",
						"type": "DOUBLE"
					},
					{
						"name": "DropoffLatLong",
						"type": "UTF8"
					},
					{
						"name": "PassengerCount",
						"type": "INT32"
					},
					{
						"name": "TripDurationSeconds",
						"type": "INT32"
					},
					{
						"name": "TripDistanceMiles",
						"type": "DOUBLE"
					},
					{
						"name": "PaymentType",
						"type": "UTF8"
					},
					{
						"name": "FareAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "SurchargeAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TipAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TollsAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalAmount",
						"type": "DECIMAL",
						"precision": 19,
						"scale": 4
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorageTraining')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorageTraining')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageTraining_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorageTraining_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DatalakeStorageCopyData')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('DatalakeStorageCopyData_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('DatalakeStorageCopyData_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-ws-mindmajix-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-ws-mindmajix-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-ws-mindmajix-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-ws-mindmajix-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "NYCTaxiTripDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "NycTripTaxi",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DateID as integer,",
						"          MedallionID as integer,",
						"          HackneyLicenseID as integer,",
						"          PickupTimeID as integer,",
						"          DropoffTimeID as integer,",
						"          PickupGeographyID as integer,",
						"          DropoffGeographyID as integer,",
						"          PickupLatitude as double,",
						"          PickupLongitude as double,",
						"          PickupLatLong as string,",
						"          DropoffLatitude as double,",
						"          DropoffLongitude as double,",
						"          DropoffLatLong as string,",
						"          PassengerCount as integer,",
						"          TripDurationSeconds as integer,",
						"          TripDistanceMiles as double,",
						"          PaymentType as string,",
						"          FareAmount as decimal(19,4),",
						"          SurchargeAmount as decimal(19,4),",
						"          TaxAmount as decimal(19,4),",
						"          TipAmount as decimal(19,4),",
						"          TollsAmount as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 derive(column1 = greaterOrEqual(TripDistanceMiles,1)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateID as integer,",
						"          MedallionID as integer,",
						"          HackneyLicenseID as integer,",
						"          PickupTimeID as integer,",
						"          DropoffTimeID as integer,",
						"          PickupGeographyID as integer,",
						"          DropoffGeographyID as integer,",
						"          PickupLatitude as double,",
						"          PickupLongitude as double,",
						"          PickupLatLong as string,",
						"          DropoffLatitude as double,",
						"          DropoffLongitude as double,",
						"          DropoffLatLong as string,",
						"          PassengerCount as integer,",
						"          TripDurationSeconds as integer,",
						"          TripDistanceMiles as double,",
						"          PaymentType as string,",
						"          FareAmount as decimal(19,4),",
						"          SurchargeAmount as decimal(19,4),",
						"          TaxAmount as decimal(19,4),",
						"          TipAmount as decimal(19,4),",
						"          TollsAmount as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/NYCTaxiTripDataset')]",
				"[concat(variables('workspaceId'), '/datasets/NycTripTaxi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dataflow2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "scdexecution",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "NycTripTaxi",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DateID as integer,",
						"          MedallionID as integer,",
						"          HackneyLicenseID as integer,",
						"          PickupTimeID as integer,",
						"          DropoffTimeID as integer,",
						"          PickupGeographyID as integer,",
						"          DropoffGeographyID as integer,",
						"          PickupLatitude as double,",
						"          PickupLongitude as double,",
						"          PickupLatLong as string,",
						"          DropoffLatitude as double,",
						"          DropoffLongitude as double,",
						"          DropoffLatLong as string,",
						"          PassengerCount as integer,",
						"          TripDurationSeconds as integer,",
						"          TripDistanceMiles as double,",
						"          PaymentType as string,",
						"          FareAmount as decimal(19,4),",
						"          SurchargeAmount as decimal(19,4),",
						"          TaxAmount as decimal(19,4),",
						"          TipAmount as decimal(19,4),",
						"          TollsAmount as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 derive(Output = greater(TripDistanceMiles,1)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateID as integer,",
						"          MedallionID as integer,",
						"          HackneyLicenseID as integer,",
						"          PickupTimeID as integer,",
						"          DropoffTimeID as integer,",
						"          PickupGeographyID as integer,",
						"          DropoffGeographyID as integer,",
						"          PickupLatitude as double,",
						"          PickupLongitude as double,",
						"          PickupLatLong as string,",
						"          DropoffLatitude as double,",
						"          DropoffLongitude as double,",
						"          DropoffLatLong as string,",
						"          PassengerCount as integer,",
						"          TripDurationSeconds as integer,",
						"          TripDistanceMiles as double,",
						"          PaymentType as string,",
						"          FareAmount as decimal(19,4),",
						"          SurchargeAmount as decimal(19,4),",
						"          TaxAmount as decimal(19,4),",
						"          TipAmount as decimal(19,4),",
						"          TollsAmount as decimal(19,4),",
						"          TotalAmount as decimal(19,4)",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/scdexecution')]",
				"[concat(variables('workspaceId'), '/datasets/NycTripTaxi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/External Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Use TrainingDB\nGO\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Hello@123'\n\nCREATE DATABASE SCOPED CREDENTIAL democredential\nWITH IDENTITY = 'SHARED ACCESS SIGNATURE',\nSECRET = 'sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupyx&se=2023-06-02T11:53:24Z&st=2023-06-02T03:53:24Z&spr=https&sig=2XgbvPtREEYFFr4OrInfPjWCHIYkatCwfWGxMSBZA2E%3D'\nGO\n\nCREATE EXTERNAL DATA SOURCE demodatasource WITH(\nLOCATION = 'https://synapsesadlsgen2.blob.core.windows.net',\nCREDENTIAL = democredential\n);\n\nCREATE EXTERNAL FILE FORMAT ParquetFileFormat\nWITH(\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n\nCREATE SCHEMA NYCTaxi\n\nCREATE EXTERNAL TABLE NYCTaxi.PassengerCountStats\n    WITH\n    (\n        LOCATION = 'synapsedemo/NYCTaxi/',\n        DATA_SOURCE = demodatasource,\n        FILE_FORMAT = ParquetFileFormat\n    )\nAS\nSELECT PassengerCount,\n      SUM(AvgTripDistance) as SumTripDistance,\n      AVG(AvgTripDistance) as AvgTripDistance\nFROM \nOPENROWSET\n(\n    BULK 'https://synapsesadlsgen2.dfs.core.windows.net/synapsetraining/NYCTaxi/parquetfile/part-00000-f5720c7d-066d-4f69-aabb-46cf1da30620-c000.snappy.parquet',\n        FORMAT = 'PARQUET'\n)AS [result]\n\nWHERE AvgTripDistance > 0 AND PassengerCount > 0\nGROUP BY PassengerCount\nGO\n\nselect * from NYCTaxi.PassengerCountStats\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "TrainingDB",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HADOOP External Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Use SynapseTrainingDB\nGO\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Hello@123!$%'\n\nCREATE DATABASE SCOPED CREDENTIAL trainingcredential\nWITH IDENTITY = 'Managed Identity'\nGO\n\nCREATE EXTERNAL DATA SOURCE trainingdatasource WITH(\nLOCATION = 'abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net',\nCREDENTIAL = trainingcredential,\nTYPE = HADOOP\n);\n\nCREATE EXTERNAL FILE FORMAT ParquetTrainingFileFormat\nWITH(\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n\n\nCREATE EXTERNAL TABLE dbo.NYCTaxi\n( \n\t[DateID] [int]  NULL,\n\t[MedallionID] [int]  NULL,\n\t[HackneyLicenseID] [int]  NULL,\n\t[PickupTimeID] [int]  NULL,\n\t[DropoffTimeID] [int]  NULL,\n\t[PickupGeographyID] [int]  NULL,\n\t[DropoffGeographyID] [int]  NULL,\n\t[PickupLatitude] [float]  NULL,\n\t[PickupLongitude] [float]  NULL,\n\t[PickupLatLong] [nvarchar](4000)  NULL,\n\t[DropoffLatitude] [float]  NULL,\n\t[DropoffLongitude] [float]  NULL,\n\t[DropoffLatLong] [nvarchar](4000)  NULL,\n\t[PassengerCount] [int]  NULL,\n\t[TripDurationSeconds] [int]  NULL,\n\t[TripDistanceMiles] [float]  NULL,\n\t[PaymentType] [nvarchar](4000)  NULL,\n\t[FareAmount] [numeric](19,4)  NULL,\n\t[SurchargeAmount] [numeric](19,4)  NULL,\n\t[TaxAmount] [numeric](19,4)  NULL,\n\t[TipAmount] [numeric](19,4)  NULL,\n\t[TollsAmount] [numeric](19,4)  NULL,\n\t[TotalAmount] [numeric](19,4)  NULL\n)\n    WITH\n    (\n        LOCATION = '/NYCTripSmall.parquet',\n        DATA_SOURCE = trainingdatasource,\n        FILE_FORMAT = ParquetTrainingFileFormat\n    )\n\n    select top 100* from dbo.NYCTaxi",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SynapseTrainingDB",
						"poolName": "SynapseTrainingDB"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/NYCTripTaxi')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.objects O JOIN sys.schemas S ON O.schema_id = S.schema_id WHERE O.NAME = 'NYCTaxiTripSmall' AND O.TYPE = 'U' AND S.NAME = 'dbo')\nCREATE TABLE dbo.NYCTaxiTripSmall\n    (\n     [DateID] int,\n     [MedallionID] int,\n     [HackneyLicenseID] int,\n     [PickupTimeID] int,\n     [DropoffTimeID] int,\n     [PickupGeographyID] int,\n     [DropoffGeographyID] int,\n     [PickupLatitude] float,\n     [PickupLongitude] float,\n     [PickupLatLong] nvarchar(4000),\n     [DropoffLatitude] float,\n     [DropoffLongitude] float,\n     [DropoffLatLong] nvarchar(4000),\n     [PassengerCount] int,\n     [TripDurationSeconds] int,\n     [TripDistanceMiles] float,\n     [PaymentType] nvarchar(4000),\n     [FareAmount] numeric(19,4),\n     [SurchargeAmount] numeric(19,4),\n     [TaxAmount] numeric(19,4),\n     [TipAmount] numeric(19,4),\n     [TollsAmount] numeric(19,4),\n     [TotalAmount] numeric(19,4)\n    )\nWITH\n    (\n    DISTRIBUTION = ROUND_ROBIN,\n     CLUSTERED COLUMNSTORE INDEX\n     -- HEAP\n    )\nGO\n\nCOPY INTO dbo.NYCTaxiTripSmall\n(DateID 1, MedallionID 2, HackneyLicenseID 3, PickupTimeID 4, DropoffTimeID 5,\nPickupGeographyID 6, DropoffGeographyID 7, PickupLatitude 8, PickupLongitude 9, \nPickupLatLong 10, DropoffLatitude 11, DropoffLongitude 12, DropoffLatLong 13, \nPassengerCount 14, TripDurationSeconds 15, TripDistanceMiles 16, PaymentType 17, \nFareAmount 18, SurchargeAmount 19, TaxAmount 20, TipAmount 21, TollsAmount 22, \nTotalAmount 23)\nFROM 'https://synapsesadlsgen2.dfs.core.windows.net/synapsetraining/NYCTripSmall.parquet'\nWITH\n(\n    FILE_TYPE = 'PARQUET'\n    ,MAXERRORS = 0\n    ,IDENTITY_INSERT = 'OFF'\n)\n\nSelect count(*) from dbo.NYCTaxiTripSmall\n\nSELECT PassengerCount,\n      SUM(TripDistanceMiles) as SumTripDistance,\n      AVG(TripDistanceMiles) as AvgTripDistance\nINTO dbo.PassengerCountStats\nFROM  dbo.NYCTaxiTripSmall\nWHERE TripDistanceMiles > 0 AND PassengerCount > 0\nGROUP BY PassengerCount;\nSELECT * FROM dbo.PassengerCountStats\nORDER BY PassengerCount;",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SynapseTrainingDB",
						"poolName": "SynapseTrainingDB"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Native External Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Use SynapseTrainingDB\nGO\n\nCREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Hello@123!$%'\n\nCREATE DATABASE SCOPED CREDENTIAL trainingcredential\nWITH IDENTITY = 'Managed Identity'\nGO\n\nCREATE EXTERNAL DATA SOURCE trainingdatasource2 WITH(\nLOCATION = 'abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net',\nCREDENTIAL = trainingcredential\n);\n\nCREATE EXTERNAL FILE FORMAT ParquetTrainingFileFormat\nWITH(\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n)\n\n\nCREATE EXTERNAL TABLE dbo.NYCTaxi2\n( \n\t[DateID] [int]  NULL,\n\t[MedallionID] [int]  NULL,\n\t[HackneyLicenseID] [int]  NULL,\n\t[PickupTimeID] [int]  NULL,\n\t[DropoffTimeID] [int]  NULL,\n\t[PickupGeographyID] [int]  NULL,\n\t[DropoffGeographyID] [int]  NULL,\n\t[PickupLatitude] [float]  NULL,\n\t[PickupLongitude] [float]  NULL,\n\t[PickupLatLong] [nvarchar](4000)  NULL,\n\t[DropoffLatitude] [float]  NULL,\n\t[DropoffLongitude] [float]  NULL,\n\t[DropoffLatLong] [nvarchar](4000)  NULL,\n\t[PassengerCount] [int]  NULL,\n\t[TripDurationSeconds] [int]  NULL,\n\t[TripDistanceMiles] [float]  NULL,\n\t[PaymentType] [nvarchar](4000)  NULL,\n\t[FareAmount] [numeric](19,4)  NULL,\n\t[SurchargeAmount] [numeric](19,4)  NULL,\n\t[TaxAmount] [numeric](19,4)  NULL,\n\t[TipAmount] [numeric](19,4)  NULL,\n\t[TollsAmount] [numeric](19,4)  NULL,\n\t[TotalAmount] [numeric](19,4)  NULL\n)\n    WITH\n    (\n        LOCATION = '/NYCTripSmall.parquet',\n        DATA_SOURCE = trainingdatasource2,\n        FILE_FORMAT = ParquetTrainingFileFormat\n    )\n\n    \n    select top 100* from dbo.NYCTaxi",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "SynapseTrainingDB",
						"poolName": "SynapseTrainingDB"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OpenRowSet_Function')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n    Department, Sum(Salary) as Total_Salary\nFROM\n    OPENROWSET(\n        BULK 'https://synapsesadlsgen2.dfs.core.windows.net/synapsetraining/Empdetails.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n    group by Department\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OpenRowset_Tricks')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n   *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsesadlsgen2.dfs.core.windows.net/synapsetraining/Empdetails.csv',\n        FORMAT = 'CSV',\n        HEADER_ROW = TRUE,\n        PARSER_VERSION = '2.0'\n)\nwith\n    (\nDepartment nvarchar(30)\n    )\n    AS [result]\n    \n    \n    -- This is auto-generated code\nSELECT\n    TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsesadlsgen2.dfs.core.windows.net/synapsetraining/NYCTripSmall.parquet',\n        FORMAT = 'PARQUET'\n    ) \n    with\n    (\nDateID BIGINT\n,MedallionID INT\n    )\n    AS [result]\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "bb2bae90-adc7-48f0-b6ba-a7b464865fa6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/343918f2-c47a-438c-9dc3-bfc4576324ba/resourceGroups/synapse-midmajix-training/providers/Microsoft.Synapse/workspaces/synapse-ws-mindmajix/bigDataPools/SparkPool1",
						"name": "SparkPool1",
						"type": "Spark",
						"endpoint": "https://synapse-ws-mindmajix.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"new_rows = [('Arnab','Male',5000),('Radha','Female',10000)]\r\n",
							"df = spark.createDataFrame(new_rows,['Name','Gender','Salary'])\r\n",
							"df.show()\r\n",
							"#df1 = df.repartition(1)\r\n",
							"#df1.write.csv('abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net/PysparkCodingFiles/',header=True,mode ='overwrite')"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.createOrReplaceTempView(\"demoTempTable\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"--SHOW TABLES\r\n",
							"Select * from demoTempTable"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"import pandas\r\n",
							"df2 = pandas.read_csv('abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net/Empdetails.csv',\r\n",
							"storage_options = {'accountkey':'vTuXI5wwfw//GEtVYR1FzwNhVPoIrBghdwWoPHqAsYDNNE8AYBdFcw7FjbNt+V+9PsWQfmgMLSJp+ASthuHiPQ=='})\r\n",
							"display(df2)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas\r\n",
							"df3 = pandas.DataFrame({'id':[1,2],'name':['Arnab','Rahul']})\r\n",
							"df3.to_csv('abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net/EmpdetailsDemo.csv',\r\n",
							"storage_options = {'accountkey':'vTuXI5wwfw//GEtVYR1FzwNhVPoIrBghdwWoPHqAsYDNNE8AYBdFcw7FjbNt+V+9PsWQfmgMLSJp+ASthuHiPQ=='})"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import fsspec\r\n",
							"import pandas\r\n",
							"\r\n",
							"adls_account_name = 'synapseadlsgen2'\r\n",
							"sas_key = TokenLibrary.getConnectionString('AzureDataLakeStorageTraining')\r\n",
							"fsspec.open('abfss://synapsetraining/Empdetails.csv',account_name = adls_account_name, sas_token = sas_key)\r\n",
							"with fsspec_object.open() as f:\r\n",
							"   df5= pandas.read_csv(f)\r\n",
							"\r\n",
							"display(f)"
						],
						"outputs": [],
						"execution_count": 21
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 2')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d9656965-9a49-4bfe-9fdd-20949933b07c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"39667a00-fbca-4999-ba27-0bdf71592a5e": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "1",
												"1": "Arnab",
												"2": "50000",
												"3": "IT"
											},
											{
												"0": "2",
												"1": "Rahul",
												"2": "68000",
												"3": "Finance"
											},
											{
												"0": "3",
												"1": "Rishika",
												"2": "25000",
												"3": "HR"
											},
											{
												"0": "4",
												"1": "Rakesh",
												"2": "10000",
												"3": "Logistics"
											},
											{
												"0": "5",
												"1": "Rohit",
												"2": "35000",
												"3": "IT"
											},
											{
												"0": "6",
												"1": "Sweta",
												"2": "29000",
												"3": "Finance"
											},
											{
												"0": "7",
												"1": "Shradhha",
												"2": "38000",
												"3": "HR"
											},
											{
												"0": "8",
												"1": "Ranbir",
												"2": "20000",
												"3": "Logistics"
											},
											{
												"0": "9",
												"1": "Deepika",
												"2": "30000",
												"3": "IT"
											},
											{
												"0": "10",
												"1": "Alia",
												"2": "38000",
												"3": "Finance"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "Id",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "Name",
												"type": "string"
											},
											{
												"key": "2",
												"name": "Salary",
												"type": "bigint"
											},
											{
												"key": "3",
												"name": "Department",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/343918f2-c47a-438c-9dc3-bfc4576324ba/resourceGroups/synapse-midmajix-training/providers/Microsoft.Synapse/workspaces/synapse-ws-mindmajix/bigDataPools/SparkPool1",
						"name": "SparkPool1",
						"type": "Spark",
						"endpoint": "https://synapse-ws-mindmajix.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"new_rows = [('Arnab','Male',5000),('Rahul','Male',100000)]\r\n",
							"df = spark.createDataFrame(new_rows,['Name','Gender','Salary'])\r\n",
							"df.show()\r\n",
							"df1 = df.repartition(1)\r\n",
							"df1.write.csv('abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net/PysparkCodingFiles/',header=True,mode = 'overwrite')"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.createOrReplaceTempView(\"demoTempTable\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"Select * from demoTempTable"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"import pandas\r\n",
							"import fsspec\r\n",
							"\r\n",
							"\r\n",
							"df2 = pandas.read_csv('abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net/Empdetails.csv',\r\n",
							"storage_options = {'accountkey':'vTuXI5wwfw//GEtVYR1FzwNhVPoIrBghdwWoPHqAsYDNNE8AYBdFcw7FjbNt+V+9PsWQfmgMLSJp+ASthuHiPQ=='})\r\n",
							"display(df2)\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"import pandas\r\n",
							"df3 = pandas.DataFrame({'id':[1,2],'name':['Arnab','Rahul']})\r\n",
							"df3.to_csv('abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net/EmpdetailsDemo5.csv',\r\n",
							"storage_options = {'accountkey':'vTuXI5wwfw//GEtVYR1FzwNhVPoIrBghdwWoPHqAsYDNNE8AYBdFcw7FjbNt+V+9PsWQfmgMLSJp+ASthuHiPQ=='})"
						],
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 3')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "c7c7e4fa-1a2f-401d-9f7e-0a19db51f3c1"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/343918f2-c47a-438c-9dc3-bfc4576324ba/resourceGroups/synapse-midmajix-training/providers/Microsoft.Synapse/workspaces/synapse-ws-mindmajix/bigDataPools/SparkPool1",
						"name": "SparkPool1",
						"type": "Spark",
						"endpoint": "https://synapse-ws-mindmajix.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"first_name = \"Arnab\" \r\n",
							"Last_name = \"Dey\""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Fullname = first_name + ' ' + Last_name\r\n",
							"print(Fullname)"
						],
						"outputs": [],
						"execution_count": 4
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Notebook 4')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b402d026-4881-4fa9-9aa9-b0012dc72a8c"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/343918f2-c47a-438c-9dc3-bfc4576324ba/resourceGroups/synapse-midmajix-training/providers/Microsoft.Synapse/workspaces/synapse-ws-mindmajix/bigDataPools/SparkPool1",
						"name": "SparkPool1",
						"type": "Spark",
						"endpoint": "https://synapse-ws-mindmajix.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"%run /Notebook 3 {'first_name':\"Rahul\",'Last_name':\"Kumar\"}"
						],
						"outputs": [],
						"execution_count": 9
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkCode')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "1ad8aebf-f03c-4d70-8b27-87459b1f1706"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/343918f2-c47a-438c-9dc3-bfc4576324ba/resourceGroups/synapse-midmajix-training/providers/Microsoft.Synapse/workspaces/synapse-ws-mindmajix/bigDataPools/SparkPool1",
						"name": "SparkPool1",
						"type": "Spark",
						"endpoint": "https://synapse-ws-mindmajix.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df=spark.read.load(path='abfss://synapsetraining@synapsesadlsgen2.dfs.core.windows.net/NYCTripSmall.parquet',format='parquet')\r\n",
							"#display(df.limit(10))\r\n",
							"#df.printSchema()"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\r\n",
							"df.write.mode(\"overwrite\").saveAsTable(\"nyctaxi.trip\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"df1 = spark.sql(\"select * from nyctaxi.trip\")\r\n",
							"display(df1)"
						],
						"outputs": []
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"\"\"SELECT PassengerCount,\r\n",
							"      SUM(TripDistanceMiles) as SumTripDistance,\r\n",
							"      AVG(TripDistanceMiles) as AvgTripDistance\r\n",
							"FROM  nyctaxi.trip\r\n",
							"WHERE TripDistanceMiles > 0 AND PassengerCount > 0\r\n",
							"GROUP BY PassengerCount\r\n",
							"ORDER BY PassengerCount\"\"\")\r\n",
							"display(df)\r\n",
							"df.write.saveAsTable(\"nyctaxi.passengercountstats\")"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Spark_To_ADLS')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "SparkPool1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a720e706-b3a3-468c-bd09-8012a8a995b4"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/343918f2-c47a-438c-9dc3-bfc4576324ba/resourceGroups/synapse-midmajix-training/providers/Microsoft.Synapse/workspaces/synapse-ws-mindmajix/bigDataPools/SparkPool1",
						"name": "SparkPool1",
						"type": "Spark",
						"endpoint": "https://synapse-ws-mindmajix.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"df = spark.sql(\"Select * from nyctaxi.passengercountstats\")\r\n",
							"#display(df)\r\n",
							"df1 = df.repartition(1)\r\n",
							"df1.write.mode(\"overwrite\").csv(\"/NYCTaxi/csvfile\")\r\n",
							"df1.write.mode(\"overwrite\").parquet(\"/NYCTaxi/parquetfile\")"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SparkPool1')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseTrainingDB')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}